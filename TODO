xlattice_go/node/TODO

2013-08-15
    * document this: running localHost_test.go with Q=64 now just works 
        - on Ubuntu edit /etc/security/limits.conf adding
            * soft nofile 16384
            * hard nofile 65536

2013-08-12
    * In order to force an orderly shutdown of a Node, it must be
        doing something.  In other words, we need a set of commands
        which take a node through a series of states: probably
        Load(), Run(), Close(), Shutdown(), and Save(), where the
        third closes all connections and the fourth releases other
        resources.  This approach precludes or at least constrains
        controlling a node through one of those connections.

    * While the test is running, CPU usage goes up to 100% - 
        which would seem to mean it's only using 1 CPU out of the
        8 available.  Not good.

    * while the test was running lsof | wc -l returned 4735
        - after the test it returned 4710 or so for quite some time

    * FWIW free memory was about 26 GB before, during, and after the test

    * edited /etc/security/limits.conf, no benefit, may require reboot

2013-08-10
    * implement node.Save() and node.Load()
        - Save() is not just a SnapShot(): it forces an orderly
            shutdown of the node

    * if a node is started with only the name, id, and lfs 
        specified, it should load its configuration from say 
        LFS/.xlattice/config
   
    * extract localHost cluster configuration from localHost_test

    * extend localHostTest so that after configurations have
        been saved, all of the nodes in the cluster are shut 
        down and then all are restarted from their saved 
        configurations.  The save-and-reload should precede
        the communications checks.

2013-08-02
    * lfs is a path; it must be filtered accordingly
    * need peer.Parse() which converts a slice of strings back      # DONE
        into a Peer object
        - first version of parser can be quite strict
        - eventually should be syntactically liberal when
            parsing (although strict when writing)

2013-07-30
    * p_test.go should be done over the wire, so to speak; that
        is, between two 127.0.0.1 endpoints
    * the protocol must be documented
    * integrating gateways into node requires ability to create
        composite connections
        - Gateway extends Node
    * need UDP transport

2013-07-29
    * Node.Close must close all open connections 
        - take care, servers may have MANY such connections
            * could put each Close() in separate goroutine
